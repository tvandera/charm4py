import sys
import traceback

def my_except_hook(errorType, error, tb):
    traceback.print_tb(tb, limit=None)
    charm.abort(errorType.__name__ + ': ' + str(error))

sys.excepthook = my_except_hook

import os
charm.thisProxy.rexec("sys.path.append(os.path.join(os.getcwd(), 'tests', 'interactive'))", awaitable=True).get()

assert charm.myPe() == 0


class Worker(Chare):
    def work(self, cb):
        self.contribute(2, Reducer.sum, cb)
    def retVal(self):
        return random.random()
    def work2(self, cb):
        self.contribute(self.thisIndex, Reducer.myreducer, cb)


g = Group(Worker)
g.work(future())
assert _f.get() == (charm.numPes() * 2)

import random
val = g[1].retVal(ret=True).get()
assert isinstance(val, float)

myreducer_src='''
def myreducer(contribs):
    return [6282 for _ in range(len(contribs))]
'''

charm.thisProxy.exec(myreducer_src, awaitable=True).get()
charm.thisProxy.addReducer(myreducer, awaitable=True).get()
g.work2(future())
assert all([x == 6282 for x in _f.get()])


charm.sleep(3.0)


import mylib
num_chares = charm.numPes() * 4
a = Array(mylib.Worker, num_chares)
a.work(x=33, cb=future())
assert _f.get() == (num_chares * 33)


print('interactive session says bye')
exit()

